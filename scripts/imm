#!/bin/bash
#
# Copyright (c) 2018 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

show_help() {
cat << EOF
Usage: 
	${0##*/} [-vhapc] [OPERATION] [RESOURCE] [_ADDITIONAL_PARAMS_]
Options:
	v - verbose mode, prints simplified cURL (vv - prints full cURL)
	h - help
	a - management api address (could be provided with MANAGEMENT_API_ADDRESS env or from config file)
	p - management api port (could be provided with MANAGEMENT_API_PORT env or from config file)
	c - path to config file
	k - allowing connection to management api endpoints with not trusted certificates
	o - login without launching browser (offline)
Examples:
	.${0##*/} -a mgmt.example.com -p 443 -v create tenant mytenant
	.${0##*/} create t mytenant myscope
	.${0##*/} create e myendpoint mymodel "{specific{versions:1}}" mytenant tf-serving subjectName
	.${0##*/} -a 127.0.0.1 login
	.${0##*/} logout
	.${0##*/} up e myendpoint mytenant --resources "{\"requests.cpu\":\"0\",\"requests.memory\":\"0\"}"
	.${0##*/} u ./saved_model.pb mymodel 2 mytenant
	.${0##*/} run-inference myendpoint-mytenant.example.com:443 mymodel numpy ../images.npy  10 server.crt client.crt client.key
	.${0##*/} get model-status myendpoint-mytenant.example.com:443 mymodel server.crt client.crt client.key
Operations:
	create (c), remove (rm), update (up), scale (s), list (ls), login, logout, upload (u), run-inference (ri), view (v), get (g)
Resources:
	tenant (t), endpoint (e), model (m), serving (s), model-status (ms)
Environment variables:
	IMM_CONFIG_PATH - Inference Model Manager config file
	MANAGEMENT_API_ADDRESS - management api address
	MANAGEMENT_API_PORT - management api port
	CERT - base64 encoded certificate for tenant creation
	MANAGEMENT_CA_CERT_PATH = path to ca-man-api.crt used for login
	TENANT_RESOURCES - quota used for tenant creation
	ENDPOINT_RESOURCES - quota used for endpoint creation
	IMM_TOKEN - token required to perform request, by default it is provided within IMM_CONFIG_PATH file
EOF
}

generate_client_certs() {
 . ./generate_certs.sh
}

VERBOSE=0
OPTIND=1
DEFAULT_CFG_FILE=~/.immconfig
IMM_CONFIG_PATH=${IMM_CONFIG_PATH:=${DEFAULT_CFG_FILE}}

while getopts "okhva:p:c:" opt; do
	case $opt in
		h)	show_help
			exit 0
			;;
		v)	let "VERBOSE++"
			;;
		a)	MANAGEMENT_API_ADDRESS=$OPTARG
			echo "Management api address: ${MANAGEMENT_API_ADDRESS}"
			;;
		p)	MANAGEMENT_API_PORT=$OPTARG
			echo "Management api port: ${MANAGEMENT_API_PORT}"
			;;
		c)	IMM_CONFIG_PATH=$OPTARG
			echo "Config file: ${IMM_CONFIG_PATH}"
			;;
		k)	INSECURE=-k
			;;
		o)  OFFLINE=--offline
			;;
		*)	show_help >&2
			exit 1
			;;
	esac
done
shift "$((OPTIND-1))"

OPERATION=$1; shift
RESOURCE=$1; shift
PARAM_1=$1; shift
PARAM_2=$1; shift
PARAM_3=$1; shift
PARAM_4=$1; shift
PARAM_5=$1; shift
PARAM_6=$1; shift
PARAM_7=$1; shift
PARAM_8=$1; shift
IMM_TOKEN=${IMM_TOKEN}

if [[ -s ${IMM_CONFIG_PATH} ]]; then
	IMM_TOKEN=`cat ${IMM_CONFIG_PATH} | jq -r '.id_token'`
	[[ -z "${MANAGEMENT_API_ADDRESS}" ]] && MANAGEMENT_API_ADDRESS=`cat ${IMM_CONFIG_PATH} | jq -r '.management_api_address'`
	[[ -z "${MANAGEMENT_API_PORT}" ]] && MANAGEMENT_API_PORT=`cat ${IMM_CONFIG_PATH} | jq -r '.management_api_port'`
elif [[ ${OPERATION} != "login"  && -z ${IMM_TOKEN} ]]; then
	echo "Please login first"
	exit 0
fi

MANAGEMENT_API_ADDRESS=${MANAGEMENT_API_ADDRESS:-'127.0.0.1'}
MANAGEMENT_API_PORT=${MANAGEMENT_API_PORT:-443}

CERT=${CERT}

TENANT_RESOURCES=${TENANT_RESOURCES:="{\"requests.cpu\": \"2\", \"requests.memory\": \"2Gi\", \"maxEndpoints\": 15}"}

ENDPOINT_RESOURCES=${ENDPOINT_RESOURCES:="{\"requests.cpu\": \"0\", \"requests.memory\": \"0\"}"}


case "$OPERATION" in
	create | c) 
		case "$RESOURCE" in
			tenant | t)
				[[ -z ${PARAM_1} ]] && read -p "Please provide tenant name " PARAM_1
				[[ -z ${PARAM_2} ]] && read -p "Please provide scope (group name) " PARAM_2
				read -p "Do you want to generate client certificates Y/n?" GENERATE_CERTS
				[[ $GENERATE_CERTS != "n" ]] && generate_client_certs
				CURL='curl $INSECURE -s -S -H "accept: application/json" \
					-H "Authorization: ${IMM_TOKEN}" -H "Content-Type: application/json" \
					-d "{\"name\": \"${PARAM_1}\", \"cert\": \"${CERT}\", \"scope\":\"${PARAM_2}\",\"quota\": ${TENANT_RESOURCES}}" \
					-X POST "https://${MANAGEMENT_API_ADDRESS}:${MANAGEMENT_API_PORT}/tenants"'
				[[ ${VERBOSE} == 1 ]] && echo $CURL
				[[ ${VERBOSE} == 2 ]] && eval echo $CURL
				eval "$CURL"
				;;
			endpoint | e)
				[[ -z ${PARAM_1} ]] && read -p "Please provide endpoint name " PARAM_1
				[[ -z ${PARAM_2} ]] && read -p "Please provide model name " PARAM_2
				[[ -z ${PARAM_3} ]] && read -p "Please provide model version policy (press enter for default)" PARAM_3
				[[ -z ${PARAM_4} ]] && read -p "Please provide tenant name " PARAM_4
				[[ -z ${PARAM_5} ]] && read -p "Please provide serving name (default: tf-serving) " PARAM_5
				[[ -z ${PARAM_6} ]] && PARAM_6=client
				[[ -z ${PARAM_5} ]] && PARAM_5=tf-serving
				[[ -n ${PARAM_3} ]] && PARAM_3=", \"modelVersionPolicy\": \"${PARAM_3}\""
				CURL='curl $INSECURE -s -S -X POST \
					"https://${MANAGEMENT_API_ADDRESS}:${MANAGEMENT_API_PORT}/tenants/${PARAM_4}/endpoints" \
					-H "accept: application/json" \
					-H "Authorization: ${IMM_TOKEN}" -H "Content-Type: application/json" \
					-d "{\"servingName\":\"${PARAM_5}\", \"modelName\":\"${PARAM_2}\", \"endpointName\":\"${PARAM_1}\", \"subjectName\": \"${PARAM_6}\", \"resources\": ${ENDPOINT_RESOURCES} ${PARAM_3}}"'
				[[ ${VERBOSE} == 1 ]] && echo $CURL
				[[ ${VERBOSE} == 2 ]] && eval echo $CURL
				eval "$CURL"
				;;
		esac
		;;
	remove | rm)
		case "$RESOURCE" in
			tenant | t)
				[[ -z ${PARAM_1} ]] && read -p "Please provide tenant name " PARAM_1
				CURL='curl $INSECURE -s -S -H "accept: application/json" \
					-H "Authorization: ${IMM_TOKEN}" -H "Content-Type: application/json"  \
					-d "{\"name\": \"${PARAM_1}\"}" -X DELETE \
					"https://${MANAGEMENT_API_ADDRESS}:${MANAGEMENT_API_PORT}/tenants"'
				[[ ${VERBOSE} == 1 ]] && echo $CURL
				[[ ${VERBOSE} == 2 ]] && eval echo $CURL
				eval "$CURL"
				;;
			endpoint | e)
				[[ -z ${PARAM_1} ]] && read -p "Please provide endpoint name " PARAM_1
				[[ -z ${PARAM_2} ]] && read -p "Please provide tenant name " PARAM_2
				CURL='curl $INSECURE -s -S -H "accept: application/json" \
					-H "Authorization: ${IMM_TOKEN}" -H "Content-Type: application/json"  \
					-d "{\"endpointName\": \"${PARAM_1}\"}" -X DELETE \
					"https://${MANAGEMENT_API_ADDRESS}:${MANAGEMENT_API_PORT}/tenants/${PARAM_2}/endpoints"'
				[[ ${VERBOSE} == 1 ]] && echo $CURL
				[[ ${VERBOSE} == 2 ]] && eval echo $CURL
				eval "$CURL"
				;;
			model | m)
				[[ -z ${PARAM_1} ]] && read -p "Please provide model name " PARAM_1
				[[ -z ${PARAM_2} ]] && read -p "Please provide model version " PARAM_2
				[[ -z ${PARAM_3} ]] && read -p "Please provide tenant name " PARAM_3
				CURL='curl $INSECURE -X DELETE -s -S \
					"https://${MANAGEMENT_API_ADDRESS}:${MANAGEMENT_API_PORT}/tenants/${PARAM_3}/models" -H "accept: application/json" \
					-H "Authorization: ${IMM_TOKEN}" -H "Content-Type: application/json" \
					-d "{\"modelName\": \"${PARAM_1}\", \"modelVersion\": ${PARAM_2}}"'
				[[ ${VERBOSE} == 1 ]] && echo $CURL
				[[ ${VERBOSE} == 2 ]] && eval echo $CURL
				eval "$CURL"
				;;
		esac
		;;
	update | up)
		case "$RESOURCE" in
			endpoint | e)
				[[ -z ${PARAM_1} ]] && read -p "Please provide endpoint name " PARAM_1
				[[ -z ${PARAM_2} ]] && read -p "Please provide tenant name " PARAM_2
				parameters=($PARAM_3 $PARAM_4 $PARAM_5 $PARAM_6 $PARAM_7 $PARAM_8 $PARAM_9 $PARAM_10)
				i=0
				while [ $i -lt 7 ] ; do
					case ${parameters[i]} in
						--modelName)
							[[ "${parameters[($i+1)]}" ]] && modelName=${parameters[($i+1)]} || { echo '"--modelName" requires argument' && exit 1; }
							;;
						--modelVersionPolicy)
							[[ "${parameters[($i+1)]}" ]] && modelVersionPolicy=${parameters[($i+1)]} || { echo '"--modelVersionPolicy" requires argument' && exit 1; }
							;;
						--resources)
							[[ "${parameters[($i+1)]}" ]] && resources=${parameters[($i+1)]} || { echo '"--resources" requires argument' && exit 1; }
							;;
						--subjectName)
							[[ "${parameters[($i+1)]}" ]] && subjectName=${parameters[($i+1)]} || { echo '"--subjectName" requires argument' && exit 1; }
							;;
						-?*)	
							[[ ${parameter[$i]} ]] && echo "Unknown option: ${parameter[i]}" 
							;;
						*)
							break      
					esac
					i=$(( $i + 2 ))
				done
				REQUEST_BODY="{"
				[[ -n $modelName ]] && REQUEST_BODY="${REQUEST_BODY}\"modelName\": \"$modelName\", "
				[[ -n $modelVersionPolicy ]] && REQUEST_BODY="${REQUEST_BODY}\"modelVersionPolicy\": \"$modelVersionPolicy\", "
				[[ -n $resources ]] && REQUEST_BODY="${REQUEST_BODY}\"resources\": $resources, "
				[[ -n $subjectName ]] && REQUEST_BODY="${REQUEST_BODY}\"subjectName\": \"$subjectName\", "
				REQUEST_BODY="${REQUEST_BODY%??}}"
				CURL='curl $INSECURE -X PATCH -s -S  \
				"https://${MANAGEMENT_API_ADDRESS}:${MANAGEMENT_API_PORT}/tenants/${PARAM_2}/endpoints/${PARAM_1}" -H "accept: application/json" \
					-H "Authorization: ${IMM_TOKEN}" -H "Content-Type: application/json" \
					-d "${REQUEST_BODY}"'
				[[ ${VERBOSE} == 1 ]] && echo $CURL
				[[ ${VERBOSE} == 2 ]] && eval echo $CURL
				eval "$CURL"
				;;
		esac
		;;
	scale | s)
		case "$RESOURCE" in
			endpoint | e)
				[[ -z ${PARAM_1} ]] && read -p "Please provide endpoint name " PARAM_1
				[[ -z ${PARAM_2} ]] && read -p "Please provide number of replicas " PARAM_2
				[[ -z ${PARAM_3} ]] && read -p "Please provide tenant name " PARAM_3
				CURL='curl $INSECURE -X PATCH -s -S  \
				"https://${MANAGEMENT_API_ADDRESS}:${MANAGEMENT_API_PORT}/tenants/${PARAM_3}/endpoints/${PARAM_1}/replicas" -H "accept: application/json" \
					-H "Authorization: ${IMM_TOKEN}" -H "Content-Type: application/json" \
					-d "{\"replicas\": ${PARAM_2}}"'
				[[ ${VERBOSE} == 1 ]] && echo $CURL
				[[ ${VERBOSE} == 2 ]] && eval echo $CURL
				eval "$CURL"
				;;
		esac
		;;
	login)
		if [ -z "${MANAGEMENT_API_ADDRESS}" ]; then
			echo "Please provide management api address"
			read MANAGEMENT_API_ADDRESS
		fi
		[[ -z ${MANAGEMENT_CA_CERT_PATH} ]] && MANAGEMENT_CA_CERT_PATH="" || MANAGEMENT_CA_CERT_PATH="--ca_cert ${MANAGEMENT_CA_CERT_PATH}"
		python webbrowser_authenticate.py $OFFLINE --address ${MANAGEMENT_API_ADDRESS} --port ${MANAGEMENT_API_PORT} ${MANAGEMENT_CA_CERT_PATH}
		IMM_TOKEN=`cat "${IMM_CONFIG_PATH}" | jq -r '.id_token'`
		echo ${IMM_TOKEN}
		;;
	logout)
		read -r -p "Are you sure? This will remove all tokens from your config file. [y/n] " response
		if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
			if [ -f ${IMM_CONFIG_PATH} ]; then
				CFG_WITHOUT_IMM_TOKENS=`cat ${IMM_CONFIG_PATH} | jq -c '{management_api_address, management_api_port}'`
				echo ${CFG_WITHOUT_IMM_TOKENS} > ${IMM_CONFIG_PATH}
				echo "Signed out"
			else
				echo "Config file ${IMM_CONFIG_PATH} does not exist"
			fi
		fi
		;;
	list | ls)	
		case "$RESOURCE" in
			tenant | tenants | t)
				CURL='curl $INSECURE -X GET -s -S -H "accept: application/json" \
				-H "Authorization: ${IMM_TOKEN}" -H "Content-Type: application/json" \
				https://${MANAGEMENT_API_ADDRESS}:${MANAGEMENT_API_PORT}/tenants'
				[[ ${VERBOSE} == 1 ]] && echo $CURL
				[[ ${VERBOSE} == 2 ]] && eval echo $CURL
				eval "$CURL"
				;;
			endpoint | endpoints | e)
				[[ -z ${PARAM_1} ]] && read -p "Please provide tenant name " PARAM_1
				CURL='curl $INSECURE -X GET -s -S \
				"https://${MANAGEMENT_API_ADDRESS}:${MANAGEMENT_API_PORT}/tenants/${PARAM_1}/endpoints" \
				-H "accept: application/json" -H "Authorization: ${IMM_TOKEN}" -H "Content-Type: application/json"'
				[[ ${VERBOSE} == 1 ]] && echo $CURL
				[[ ${VERBOSE} == 2 ]] && eval echo $CURL
				eval "$CURL"
				;;
			model | models | m)
				[[ -z ${PARAM_1} ]] && read -p "Please provide tenant name " PARAM_1
				CURL='curl $INSECURE -X GET -s -S \
				"https://${MANAGEMENT_API_ADDRESS}:${MANAGEMENT_API_PORT}/tenants/${PARAM_1}/models" \
				-H "accept: application/json" -H "Authorization: ${IMM_TOKEN}" -H "Content-Type: application/json"'
				[[ ${VERBOSE} == 1 ]] && echo $CURL
				[[ ${VERBOSE} == 2 ]] && eval echo $CURL
				eval "$CURL"
				;;
			serving | servings | s)
				CURL='curl $INSECURE -X GET -s -S -H "accept: application/json" \
				-H "Authorization: ${IMM_TOKEN}" -H "Content-Type: application/json" \
				https://${MANAGEMENT_API_ADDRESS}:${MANAGEMENT_API_PORT}/servings'
				[[ ${VERBOSE} == 1 ]] && echo $CURL
				[[ ${VERBOSE} == 2 ]] && eval echo $CURL
				eval "$CURL"
				;;
		esac
		;;
	upload | u)
		[[ -z ${RESOURCE} ]] && read -p "Please provide model path " RESOURCE
		[[ -z ${PARAM_1} ]] && read -p "Please provide model name " PARAM_1
		[[ -z ${PARAM_2} ]] && read -p "Please provide model version " PARAM_2 
		[[ -z ${PARAM_3} ]] && read -p "Please provide tenant name " PARAM_3
		python model_upload_cli.py $INSECURE ${RESOURCE} ${PARAM_1} ${PARAM_2} ${PARAM_3}
		;;
	run-inference | ri)
		[[ -z ${RESOURCE} ]] && read -p "Please provide endpoint address with port (grpc address) " RESOURCE
		[[ -z ${PARAM_1} ]] && read -p "Please provide model name " PARAM_1
		[[ -z ${PARAM_2} ]] && read -p "Please specify input type: list/numpy " PARAM_2
		[[ -z ${PARAM_3} ]] && read -p "Please provide images (type: ${PARAM_2}) " PARAM_3
		[[ -z ${PARAM_4} ]] && read -p "Please provide batch size " PARAM_4
		[[ -z ${PARAM_5} ]] && read -p "Please provide path to server cert " PARAM_5
		[[ -z ${PARAM_6} ]] && read -p "Please provide path to client cert " PARAM_6
		[[ -z ${PARAM_7} ]] && read -p "Please provide path to client key " PARAM_7
		case "${PARAM_2}" in
				list)   INPUT_TYPE="--images_list"
					;;
				numpy)  INPUT_TYPE="--images_numpy_path"
					;;
				*)  echo "Wrong input type, choose list or numpy"
					exit 0
					;;
		esac
		python ../examples/grpc_client/grpc_client.py ${RESOURCE} ${PARAM_1} \
		${INPUT_TYPE} ${PARAM_3} --batch_size ${PARAM_4} --server_cert ${PARAM_5} \
		--client_cert ${PARAM_6} --client_key ${PARAM_7}
		;;
	view | v)
		case "$RESOURCE" in
			serving | s )
				[[ -z ${PARAM_1} ]] && read -p "Please provide serving name " PARAM_1
				CURL='curl $INSECURE -X GET -s -S -H "accept: application/json" \
				-H "Authorization: ${IMM_TOKEN}" -H "Content-Type: application/json" \
				https://${MANAGEMENT_API_ADDRESS}:${MANAGEMENT_API_PORT}/servings/${PARAM_1}'
				[[ ${VERBOSE} == 1 ]] && echo $CURL
				[[ ${VERBOSE} == 2 ]] && eval echo $CURL
				eval "$CURL"
				;;
			endpoint | e )
				[[ -z ${PARAM_1} ]] && read -p "Please provide endpoint name " PARAM_1
				[[ -z ${PARAM_2} ]] && read -p "Please provide tenant name " PARAM_2
				CURL='curl $INSECURE -X GET -s -S -H "accept: application/json" \
				-H "Authorization: ${IMM_TOKEN}" -H "Content-Type: application/json" \
				https://${MANAGEMENT_API_ADDRESS}:${MANAGEMENT_API_PORT}/tenants/${PARAM_2}/endpoints/${PARAM_1}'
				[[ ${VERBOSE} == 1 ]] && echo $CURL
				[[ ${VERBOSE} == 2 ]] && eval echo $CURL
				eval "$CURL"
				;;
		esac
		;;
    get | g)
        case "$RESOURCE" in 
            model-status | ms)
                [[ -z ${PARAM_1} ]] && read -p "Please provide endpoint address with port (grpc address) " PARAM_1
                [[ -z ${PARAM_2} ]] && read -p "Please provide model name " PARAM_2
                [[ -z ${PARAM_3} ]] && read -p "Please provide path to server cert " PARAM_3
                [[ -z ${PARAM_4} ]] && read -p "Please provide path to client cert " PARAM_4
                [[ -z ${PARAM_5} ]] && read -p "Please provide path to client key " PARAM_5
                python ../examples/grpc_client/grpc_client.py ${PARAM_1} ${PARAM_2} \
                --request_type status --server_cert ${PARAM_3} \
                --client_cert ${PARAM_4} --client_key ${PARAM_5}
                ;;
        esac        
        ;;
	*)	show_help
		exit 0
		;;
esac
