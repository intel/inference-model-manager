version: 2.0
jobs:
  style_and_unit_tests_mgt_api:
    docker:
      - image: circleci/python:3.6.6-browsers
    working_directory: ~/inference-model-manager
    steps:
      - checkout
      - run:
          name: Create venv
          command: |
            cd ~/inference-model-manager
            python3 -m venv .venv
      - run:
          name: Style checker
          command: |
            . ~/inference-model-manager/.venv/bin/activate
            pip install -q flake8==3.5.0
            echo "management folder" && cd ~/inference-model-manager/management/ && make style
            echo "tests folder && " && cd ~/inference-model-manager/tests/ && make style
            echo "scripts folder" && cd ~/inference-model-manager/scripts/ && flake8 --max-line-length 100
            echo "grpc client folder && " && cd ~/inference-model-manager/examples/grpc_client/ && make style
      - run:
          name: Run unit tests
          command: |
            . ~/inference-model-manager/.venv/bin/activate
            pip install -r management/requirements.txt
            cd ~/inference-model-manager/management/ && python setup.py test
  style_and_unit_tests_crd:
    docker:
      - image: circleci/golang:1.11-node
    working_directory: ~/inference-model-manager
    steps:
      - checkout
      - run:
          name: gometalinter and unit tests
          command: |
            cd ~/inference-model-manager/server-controller
            mkdir -p /go/src/github.com/IntelAI/inference-model-manager/server-controller
            mv * /go/src/github.com/IntelAI/inference-model-manager/server-controller
            cd /go/src/github.com/IntelAI/inference-model-manager/server-controller
            sudo apt-get install -y bc
            dep ensure -v
            make install-linter
            make check-coverage
            make test

  rebuild_images:
    docker:
      - image: circleci/python:3.6.6-browsers
    working_directory: ~/inference-model-manager
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Auth to gcp
          command: |
            echo "${GOOGLE_IMM_KEY}" | base64 -d > /tmp/gcp-key.json
            export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
            echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            sudo apt-get update && sudo apt-get install -y google-cloud-sdk
            sudo apt-get update && sudo apt-get --only-upgrade install kubectl google-cloud-sdk google-cloud-sdk-app-engine-grpc google-cloud-sdk-pubsub-emulator \
            google-cloud-sdk-app-engine-go google-cloud-sdk-cloud-build-local google-cloud-sdk-datastore-emulator google-cloud-sdk-app-engine-python google-cloud-sdk-cbt \
            google-cloud-sdk-bigtable-emulator google-cloud-sdk-app-engine-python-extras google-cloud-sdk-datalab google-cloud-sdk-app-engine-java
            gcloud auth activate-service-account --key-file /tmp/gcp-key.json
            gcloud config set project "${GOOGLE_PROJECT_ID}"
      - run:
          name: Check management api images version
          command: |
            cd ~/inference-model-manager/
            export TAG=$(find management/ -type f -exec sha256sum {} \; | cut -d " " -f1 | sort | xargs echo | sha256sum | cut -d " " -f1)
            export TAG_EXISTS=$(gcloud container images list-tags gcr.io/constant-cubist-173123/management-api | grep $TAG)
            echo $TAG
            echo $TAG_EXISTS
            cd ~/inference-model-manager/management
            if [ -z "$TAG_EXISTS" ]; then
               make circleci
            else
               echo "image already in registry - not rebuilding"
            fi
      - run:
          name: Check CRD controller image version
          command: |
            cd ~/inference-model-manager
            export TAG=$(find server-controller/ -type f -exec sha256sum {} \; | cut -d " " -f1 | sort | xargs echo | sha256sum | cut -d " " -f1)
            export TAG_EXISTS=$(gcloud container images list-tags gcr.io/constant-cubist-173123/server-controller-prod | grep $TAG)
            echo $TAG
            echo $TAG_EXISTS
            cd ~/inference-model-manager/server-controller/
            if [ -z "$TAG_EXISTS" ]; then
               make circleci
            else
               echo "image already in registry - not rebuilding"
            fi

  functional_tests:
    docker:
      - image: circleci/python:3.6.6-browsers
    working_directory: ~/inference-model-manager
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Create venv
          command: |
            cd ~/inference-model-manager/
            python3 -m venv .venv
      - run:
          name: Prepare environment variables
          command: |
            echo 'export BRANCH_SHORT=`echo ${CIRCLE_BRANCH} |tr -d "\-\_" |cut -c1-9`' >> $BASH_ENV
            echo 'export KOPS_FEATURE_FLAGS=AlphaAllowGCE' >> $BASH_ENV
            echo 'export SHORT_SHA1=`echo ${CIRCLE_SHA1} | cut -c 1-6`' >> $BASH_ENV
            echo 'export CLUSTER_NAME="imm-${SHORT_SHA1}-${BRANCH_SHORT}.k8s.local"' >> $BASH_ENV
            echo 'export CLUSTER_NAME_SHORT="imm-${SHORT_SHA1}-${BRANCH_SHORT}"' >> $BASH_ENV
            echo 'export KOPS_STATE_STORE=gs://kubernetes-clusters-imm' >> $BASH_ENV
            echo 'export GOOGLE_APPLICATION_CREDENTIALS="/tmp/gcp-key.json"' >> $BASH_ENV
            echo 'export CLUSTER_NAME_SHORT_TP=`echo ${CLUSTER_NAME_SHORT} | cut -c 1-20`' >> $BASH_ENV
            echo 'export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"' >> $BASH_ENV
            echo 'export DOMAIN_NAME="${CLUSTER_NAME_SHORT}.nlpnp.adsdcsp.com"' >> $BASH_ENV
            echo 'export MGMT_IMAGE="gcr.io/constant-cubist-173123/management-api"' >> $BASH_ENV
            echo 'export CRD_IMAGE="gcr.io/constant-cubist-173123/server-controller-prod"' >> $BASH_ENV
            echo 'export MINIO_ACCESS_KEY="AKIAIOSFODNN7EXAMPLE"' >> $BASH_ENV
            echo 'export MINIO_SECRET_KEY="wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"' >> $BASH_ENV
      - run:
          name: Choose region
          command: |
            cd ~/inference-model-manager/
            export BRANCH=$(git symbolic-ref --short HEAD)
            echo $REGION_JSON
            if [[ "$BRANCH" != "master" ]]; then
               sudo apt-get install jq
               echo "export GCE_REGION=`jq --arg namearg "$CIRCLE_USERNAME" '.[$namearg]' <<< "$REGION_JSON" | tr -d '"'`" >> $BASH_ENV
            else
               echo 'export GCE_REGION=us-west1' >> $BASH_ENV
            fi
      - run:
          name: Install tests requirements
          command: |
            . ~/inference-model-manager/.venv/bin/activate
            pip install -q --upgrade pip
            pip install -q -r ~/inference-model-manager/tests/requirements.txt
            pip install -q -r ~/inference-model-manager/scripts/requirements.txt
            pip install -q awscli --upgrade
      - run:
          name: Install required dependencies to install platform using Kops
          command: |
            cd ~/inference-model-manager/.circleci/scripts
            ./prepare_host.sh
      - run:
          name: Deploy platform (including Kops cluster creation)
          command: |
            cd ~/inference-model-manager/
            . ~/inference-model-manager/.venv/bin/activate
            echo "${GOOGLE_IMM_KEY}" | base64 -d > /tmp/gcp-key.json
            export PROJECT=`gcloud config get-value project`
            export MGMT_TAG=$(find management/ -type f -exec sha256sum {} \; | cut -d " " -f1 | sort | xargs echo | sha256sum | cut -d " " -f1)
            export CRD_TAG=$(find server-controller/ -type f -exec sha256sum {} \; | cut -d " " -f1 | sort | xargs echo | sha256sum | cut -d " " -f1)
            cd ~/inference-model-manager/installer/
            mv ./hooks/example_dns_entry_hook.sh ./hooks/dns_entry_hook.sh
            ./install.sh -d ${DOMAIN_NAME} -k ${CLUSTER_NAME_SHORT} -z ${GCE_REGION}
      - store_artifacts:
          path: ~/inference-model-manager/installer/helm-temp-dir/dex-subchart/certs
      - store_artifacts:
          path: ~/inference-model-manager/installer/helm-temp-dir/management-api-subchart/certs
      - run:
          name: Run tests
          command: |
            . ~/inference-model-manager/.venv/bin/activate
            cd ~/inference-model-manager/installer/helm-temp-dir/management-api-subchart/certs
            . script-wrong-certs.sh
            cd ~/inference-model-manager/scripts
            export B64ENCODE="base64 -w0"
            . ./prepare_test_env.sh ${DOMAIN_NAME}
            sudo cp ~/inference-model-manager/scripts/ca.pem /usr/local/share/ca-certificates/ca.crt
            sudo update-ca-certificates
            echo $CERT
            export REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt
            export CERT_BAD_CLIENT=~/inference-model-manager/installer/helm-temp-dir/management-api-subchart/certs/bad-client.crt
            export CERT_BAD_CLIENT_KEY=~/inference-model-manager/installer/helm-temp-dir/management-api-subchart/certs/bad-client.key
            export CERT_CLIENT=~/inference-model-manager/installer/helm-temp-dir/management-api-subchart/certs/client-tf.crt
            export CERT_CLIENT_KEY=~/inference-model-manager/installer/helm-temp-dir/management-api-subchart/certs/client-tf.key
            export CERT_SERVER=~/inference-model-manager/installer/helm-temp-dir/management-api-subchart/certs/server-tf.crt
            export CERT_SERVEY_KEY=~/inference-model-manager/installer/helm-temp-dir/management-api-subchart/certs/server-tf.key
            cd ~/inference-model-manager/tests
            . run_test.sh
      - run:
          name: clean after success
          when: on_success
          command: |
            cd ~/inference-model-manager/.circleci/scripts
            export PROJECT=`gcloud config get-value project`
            ./clean_up_kops.sh
            sleep 150
      - run:
          name: clean after failure
          when: on_fail
          command: |
            sleep 30m
            cd ~/inference-model-manager/.circleci/scripts
            export PROJECT=`gcloud config get-value project`
            ./clean_up_kops.sh
            sleep 150
          no_output_timeout: 32m

  gke_deployment:
    docker:
      - image: circleci/python:3.6.6-browsers
    working_directory: ~/inference-model-manager
    steps:
      - checkout
      - run:
          name: export environment variables
          command: |
            echo 'export SHORT_SHA1=`echo ${CIRCLE_SHA1} | cut -c 1-6`' >> $BASH_ENV
            echo 'export CLUSTER_NAME="gke-imm-${SHORT_SHA1}-${CIRCLE_BRANCH}"' >> $BASH_ENV
            echo 'export CLUSTER_NAME_SHORT="gke-imm-${SHORT_SHA1}-${CIRCLE_BRANCH}"' >> $BASH_ENV
            echo 'export CLUSTER_NAME_SHORT_TP=`echo ${CLUSTER_NAME_SHORT} | cut -c 1-20`' >> $BASH_ENV
            echo 'export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"' >> $BASH_ENV
            echo 'export DOMAIN_NAME="${CLUSTER_NAME_SHORT}.nlpnp.adsdcsp.com"' >> $BASH_ENV
            echo 'export MGMT_IMAGE="gcr.io/constant-cubist-173123/management-api"' >> $BASH_ENV
            echo 'export CRD_IMAGE="gcr.io/constant-cubist-173123/server-controller-prod"' >> $BASH_ENV
      - run:
          name: Install required dependecies and create cluster on GKE
          command: |
            echo "${GOOGLE_IMM_KEY}" | base64 -d > /tmp/gcp-key.json
            cd ~/inference-model-manager/.circleci/scripts
            ./prepare_host.sh
            gcloud auth activate-service-account --key-file /tmp/gcp-key.json
            gcloud config set project "${GOOGLE_PROJECT_ID}"
            gcloud container clusters create ${CLUSTER_NAME} --zone us-west1-a --num-nodes 3 --machine-type "n1-standard-2" --min-cpu-platform "Intel Skylake"
            gcloud container clusters get-credentials ${CLUSTER_NAME} --zone us-west1-a --project "${GOOGLE_PROJECT_ID}"
            kubectl create serviceaccount --namespace kube-system tiller
            kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
            curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get > get_helm.sh
            chmod 700 get_helm.sh
            ./get_helm.sh
            helm init --service-account tiller --upgrade
            sudo pip install -q awscli --upgrade
            sleep 20

      - run:
          name: Deploy platfrom on GKE
          command: |
            cd ~/inference-model-manager/
            export MGMT_TAG=$(find management/ -type f -exec sha256sum {} \; | cut -d " " -f1 | sort | xargs echo | sha256sum | cut -d " " -f1)
            export CRD_TAG=$(find server-controller/ -type f -exec sha256sum {} \; | cut -d " " -f1 | sort | xargs echo | sha256sum | cut -d " " -f1)
            cd ~/inference-model-manager/installer
            mv ./hooks/example_dns_entry_hook.sh ./hooks/dns_entry_hook.sh
            ./install.sh -d ${DOMAIN_NAME} -s -t
      - run:
          name: Delete cluster on GKE
          when: on_success
          command: |
            cd ~/inference-model-manager/.circleci/scripts
            ./clean_up_gke.sh
            sleep 150
      - run:
          name: Delete cluster on GKE on failed build
          when: on_fail
          command: |
            cd ~/inference-model-manager/.circleci/scripts
            ./clean_up_gke.sh
            sleep 150

  mark_images_as_latest:
    docker:
      - image: circleci/python:3.6.6-browsers
    working_directory: ~/inference-model-manager
    steps:
      - checkout
      - run:
          name: Set images tags to latest on master
          command: |
            export BRANCH=$(git symbolic-ref --short HEAD)
            if [ "$BRANCH" == "master" ]; then
               export TAG="latest"
            else
               export TAG=$BRANCH
            fi
            echo "${GOOGLE_IMM_KEY}" | base64 -d > /tmp/gcp-key.json
            export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
            echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            sudo apt-get update && sudo apt-get install -y google-cloud-sdk
            sudo apt-get update && sudo apt-get --only-upgrade install kubectl google-cloud-sdk google-cloud-sdk-app-engine-grpc google-cloud-sdk-pubsub-emulator \
            google-cloud-sdk-app-engine-go google-cloud-sdk-cloud-build-local google-cloud-sdk-datastore-emulator google-cloud-sdk-app-engine-python google-cloud-sdk-cbt \
            google-cloud-sdk-bigtable-emulator google-cloud-sdk-app-engine-python-extras google-cloud-sdk-datalab google-cloud-sdk-app-engine-java
            gcloud auth activate-service-account --key-file /tmp/gcp-key.json
            gcloud config set project "${GOOGLE_PROJECT_ID}"
            cd ~/inference-model-manager/
            MGMT_TAG=$(find management/ -type f -exec sha256sum {} \; | cut -d " " -f1 | sort | xargs echo | sha256sum | cut -d " " -f1)
            CRD_TAG=$(find server-controller/ -type f -exec sha256sum {} \; | cut -d " " -f1 | sort | xargs echo | sha256sum | cut -d " " -f1)
            echo y | gcloud container images add-tag gcr.io/constant-cubist-173123/management-api:$MGMT_TAG gcr.io/constant-cubist-173123/management-api:$TAG
            echo y | gcloud container images add-tag gcr.io/constant-cubist-173123/server-controller-prod:$CRD_TAG gcr.io/constant-cubist-173123/server-controller-prod:$TAG
workflows:
  version: 2
  deploy-test:
    jobs:
      - style_and_unit_tests_mgt_api
      - rebuild_images
      - style_and_unit_tests_crd
      - functional_tests:
          requires:
            - rebuild_images
      - gke_deployment:
          requires:
            - rebuild_images
      - mark_images_as_latest:
          requires:
            - gke_deployment
            - functional_tests
